import os
import logging
import datetime as dt
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
)

from gpt_brain import gpt_analyze_status, gpt_continue_status
from google_sheets import fetch_kpi, append_inbox
from calendar_api import list_events_between, pretty_events, add_event
from speech_recognition import recognize_speech

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
GOOGLE_CREDENTIALS_JSON = os.getenv("GOOGLE_CREDENTIALS_JSON")
AUTHOR_NAME = os.getenv("AUTHOR_NAME", "–í.–ü.")
BASE_URL = os.getenv("BASE_URL", "https://sobranie-bot.onrender.com")
CALENDAR_ID = os.getenv("CALENDAR_ID", "").strip()
TZ = os.getenv("TZ", "Europe/Berlin")

logging.basicConfig(level=logging.INFO)


# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –æ—à–∏–±–æ–∫: —Å—Ç–µ–∫ –≤ –ª–æ–≥–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ‚Äî –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    import traceback
    err = "".join(traceback.format_exception(None, context.error, context.error.__traceback__))
    logging.error("‚ùå Unhandled error:\n%s", err)
    try:
        chat_id = None
        if isinstance(update, Update):
            if update.effective_chat:
                chat_id = update.effective_chat.id
            elif update.callback_query and update.callback_query.message:
                chat_id = update.callback_query.message.chat_id
        if chat_id:
            await context.bot.sendMessage(chat_id, "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö Render.")
    except Exception:
        pass


# === –ö–û–ú–ê–ù–î–´ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kb = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data="status")],
        [
            InlineKeyboardButton("üóì –î–µ–Ω—å", callback_data="day"),
            InlineKeyboardButton("üìÖ –ù–µ–¥–µ–ª—è", callback_data="week"),
            InlineKeyboardButton("üóìÔ∏è –ú–µ—Å—è—Ü", callback_data="month"),
        ],
        [InlineKeyboardButton("‚ûï –í–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É", callback_data="capture")],
        [InlineKeyboardButton("üîó –ö–∞–ª–µ–Ω–¥–∞—Ä—å (–≤–µ–±)", url="https://calendar.google.com")],
        [InlineKeyboardButton("üß™ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="diag")],
    ]
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(kb),
    )


# === –°–¢–ê–¢–£–° / KPI ===
async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏...")
    kpi = fetch_kpi(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON)
    result = gpt_analyze_status(kpi)

    if isinstance(result, tuple) and len(result) >= 2:
        comment, prompt = result
    else:
        comment, prompt = str(result), ""

    context.user_data["last_status_prompt"] = prompt
    context.user_data["last_status_text"] = comment

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("‚è≠ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="MORE::status")]])
    await update.message.reply_text(f"ü§ñ –ê–Ω–∞–ª–∏–∑:\n{comment}", reply_markup=kb)


# === –°–ê–ú–û-–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===
async def diag_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from datetime import datetime, timedelta
    calendar_id = CALENDAR_ID
    creds_raw = GOOGLE_CREDENTIALS_JSON
    tz = TZ
    y_key = os.getenv("YANDEX_API_KEY", "")
    y_folder = os.getenv("YANDEX_FOLDER_ID", "")
    base_url = BASE_URL
    oai = os.getenv("OPENAI_API_KEY", "")

    # —Ç–∏–ø creds: –ø—É—Ç—å/–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JSON
    if not creds_raw:
        creds_kind = "‚ùå –ø—É—Å—Ç–æ"
    elif os.path.exists(creds_raw):
        creds_kind = f"üìÅ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–Ω–∞–π–¥–µ–Ω): {creds_raw}"
    else:
        import json
        try:
            _ = json.loads(creds_raw)
            creds_kind = "üìÑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JSON (OK)"
        except Exception as e:
            creds_kind = f"‚ö†Ô∏è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π JSON, –Ω–æ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è: {e}"

    # –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å 3 —Å–æ–±—ã—Ç–∏—è
    cal_probe = ""
    try:
        if not calendar_id:
            cal_probe = "‚ùå CALENDAR_ID –Ω–µ –∑–∞–¥–∞–Ω"
        else:
            now = datetime.utcnow()
            events = list_events_between(calendar_id, creds_raw, now, now + timedelta(days=3), max_results=3)
            if not events:
                cal_probe = "‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —á–∏—Ç–∞–µ—Ç—Å—è, —Å–æ–±—ã—Ç–∏–π –Ω–µ—Ç."
            else:
                cal_probe = "‚úÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —á–∏—Ç–∞–µ—Ç—Å—è. –ë–ª–∏–∂–∞–π—à–∏–µ —Å–æ–±—ã—Ç–∏—è:\n" + pretty_events(events)
    except Exception as e:
        cal_probe = f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}"

    stt_probe = []
    stt_probe.append("Yandex SpeechKit: " + ("‚úÖ –∫–ª—é—á –∑–∞–¥–∞–Ω" if y_key and y_folder else "‚ùå –Ω–µ—Ç –∫–ª—é—á–∞/FolderID"))
    stt_probe.append("OpenAI: " + ("‚úÖ –∫–ª—é—á –∑–∞–¥–∞–Ω" if oai else "‚Äî (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"))

    msg = (
        "üß™ DIAG:\n"
        f"‚Ä¢ CALENDAR_ID: {calendar_id or '‚Äî'}\n"
        f"‚Ä¢ GOOGLE_CREDENTIALS_JSON: {creds_kind}\n"
        f"‚Ä¢ TZ: {tz}\n"
        f"‚Ä¢ BASE_URL: {base_url or '‚Äî'}\n"
        f"‚Ä¢ ST–¢: {', '.join(stt_probe)}\n\n"
        f"{cal_probe}"
    )
    await update.message.reply_text(msg)


# === –û–ë–†–ê–ë–û–¢–ö–ê –ù–ê–ñ–ê–¢–ò–ô ===
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    raw = q.data
    data = raw.split("::")

    # --- –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–Ω–æ–ø–∫–æ–π
    if raw == "diag":
        # ¬´–ø—Ä–æ–∫—Å–∏—Ä—É–µ–º¬ª –Ω–∞ /diag, —á—Ç–æ–±—ã –ª–æ–≥–∏–∫–∞ –±—ã–ª–∞ –æ–¥–Ω–∞
        fake_update = Update(update.update_id, message=q.message)
        await diag_cmd(fake_update, context)
        return
    # --- –°—Ç–∞—Ç—É—Å KPI –ø–æ –∫–Ω–æ–ø–∫–µ ---
    if raw == "status":
        # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –≤ —Ç–æ—Ç –∂–µ —Ö–µ–Ω–¥–ª–µ—Ä, —á—Ç–æ –∏ –∫–æ–º–∞–Ω–¥–∞ /status
        fake_update = Update(update.update_id, message=q.message)
        await status_cmd(fake_update, context)
        return

    # --- –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π (–¥–µ–Ω—å / –Ω–µ–¥–µ–ª—è / –º–µ—Å—è—Ü)
    if raw in ["day", "week", "month"]:
        now = dt.datetime.utcnow()
        if raw == "day":
            end = now + dt.timedelta(days=1)
            title = "üóì –ù–∞ —Å–µ–≥–æ–¥–Ω—è"
        elif raw == "week":
            end = now + dt.timedelta(days=7)
            title = "üìÖ –ù–∞ 7 –¥–Ω–µ–π"
        else:
            end = now + dt.timedelta(days=30)
            title = "üóìÔ∏è –ù–∞ 30 –¥–Ω–µ–π"

        if not CALENDAR_ID:
            await q.edit_message_text("‚ùå CALENDAR_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.", reply_markup=None)
            return

        try:
            events = list_events_between(CALENDAR_ID, GOOGLE_CREDENTIALS_JSON, now, end)
            text = pretty_events(events)
            out = f"{title}:\n{text}" if text.strip() else f"{title}:\n‚Äî"
            await q.edit_message_text(out, reply_markup=None)
        except Exception as e:
            await q.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}", reply_markup=None)
        return

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–í–Ω–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É¬ª
    if raw == "capture":
        await q.edit_message_text("üìù –ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: ¬´–∫—É–ø–∏—Ç—å –∫–∞—Ä—Ç–æ—à–∫—É #—Å–µ–º—å—è –∑–∞–≤—Ç—Ä–∞¬ª):")
        context.user_data["capture_mode"] = True
        return

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è≠¬ª –ø–æ—Å–ª–µ KPI
    if raw == "MORE::status":
        prompt = context.user_data.get("last_status_prompt", "")
        so_far = context.user_data.get("last_status_text", "")
        if not prompt or not so_far:
            await q.message.reply_text("–ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´üìä –°—Ç–∞—Ç—É—Å¬ª.")
            return
        cont = gpt_continue_status(prompt, so_far)
        context.user_data["last_status_text"] = so_far + "\n" + cont
        await q.message.reply_text(f"ü§ñ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n{cont}")
        return

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø—Ä–∏–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –±—É–¥—É—Ç –∫–Ω–æ–ø–∫–∏ POM::dur::idx)
    if len(data) >= 3 and data[0] == "POM":
        try:
            duration = int(data[1])
            idx = int(data[2]) - 1
        except Exception:
            await q.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        top = context.user_data.get("free_top", [])
        if not (0 <= idx < len(top)):
            await q.edit_message_text("–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞–∂–º–∏ ¬´üéØ –§–æ–∫—É—Å¬ª –µ—â—ë —Ä–∞–∑.")
            return

        t = top[idx]
        ttl = f"{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','?')} ‚Äî {t.get('–ü—Ä–æ–µ–∫—Ç','?')}: {t.get('–ó–∞–¥–∞—á–∞','?')}"

        # 1) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –≤ Inbox
        append_inbox(
            GOOGLE_SHEET_ID,
            GOOGLE_CREDENTIALS_JSON,
            f"[–°–ü–†–ò–ù–¢ {duration} –º–∏–Ω] {ttl}",
            category="–°–æ–±—Ä–∞–Ω–∏–µ",
            due_str="–∑–∞–≤—Ç—Ä–∞",
            author=AUTHOR_NAME,
        )
        # 2) —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞ 06:00 –ø–æ TZ
        try:
            created = add_event(
                summary=f"[–°–ü–†–ò–ù–¢ {duration} –º–∏–Ω] {ttl}",
                minutes=duration,
                start_dt=None,  # –∑–∞–≤—Ç—Ä–∞ 06:00 (—Å–º. calendar_api.add_event)
                description="–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∏–∑ VP Assistant (üéØ –§–æ–∫—É—Å)",
            )
            link = created.get("htmlLink", "‚Äî")
            await q.edit_message_text(
                f"üß≠ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª —Å–ø—Ä–∏–Ω—Ç: {duration} –º–∏–Ω.\n"
                f"–°—Ç–∞—Ä—Ç: –∑–∞–≤—Ç—Ä–∞ 06:00 ({TZ}).\n"
                f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å: {link}"
            )
        except Exception as e:
            await q.edit_message_text(
                "üß≠ –°–ø—Ä–∏–Ω—Ç –≤–Ω–µ—Å—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ —Å–æ–∑–¥–∞–ª–æ—Å—å.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {e}"
            )
        return

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–µ—Å–ª–∏ –±—É–¥—É—Ç CAL::PRESET::DUR)
    if len(data) >= 3 and data[0] == "CAL":
        preset = data[1]
        try:
            duration = int(data[2])
        except Exception:
            duration = 60

        now_local = dt.datetime.now()
        # –¥–µ–ª–∞–µ–º start_dt ¬´–Ω–∞–∏–≤–Ω—ã–º¬ª ‚Äî calendar_api —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç TZ
        if preset == "TODAY19":
            start_dt = now_local.replace(hour=19, minute=0, second=0, microsecond=0)
            if start_dt < now_local:
                start_dt = start_dt + dt.timedelta(days=1)
        elif preset == "TOMORROW06":
            start_dt = (now_local + dt.timedelta(days=1)).replace(hour=6, minute=0, second=0, microsecond=0)
        else:
            start_dt = (now_local + dt.timedelta(days=1)).replace(hour=6, minute=0, second=0, microsecond=0)

        try:
            created = add_event(
                summary=f"[–°–ª–æ—Ç {duration} –º–∏–Ω] –§–æ–∫—É—Å-–Ω–∞–±–æ—Ä",
                minutes=duration,
                start_dt=start_dt,
                description="–ë—ã—Å—Ç—Ä—ã–π —Å–ª–æ—Ç (–ö–∞–ª–µ–Ω–¥–∞—Ä—å)",
            )
            link = created.get("htmlLink", "‚Äî")
            when = start_dt.strftime("%Y-%m-%d %H:%M")
            await q.edit_message_text(f"‚úÖ –°–ª–æ—Ç —Å–æ–∑–¥–∞–Ω: {duration} –º–∏–Ω ‚Ä¢ {when} ({TZ})\n{link}")
        except Exception as e:
            await q.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç: {e}")
        return


# === –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–ö–°–¢–ê ===
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("capture_mode"):
        context.user_data["capture_mode"] = False
        text = update.message.text
        append_inbox(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, text, author=AUTHOR_NAME)
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n{text}")
        return
    await update.message.reply_text("üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.")


# === –û–ë–†–ê–ë–û–¢–ö–ê –ì–û–õ–û–°–ê ===
async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice = update.message.voice
    file = await context.bot.get_file(voice.file_id)
    file_path = "voice.ogg"
    await file.download_to_drive(file_path)

    text = recognize_speech(file_path)
    if text.startswith("‚ö†Ô∏è"):
        await update.message.reply_text(text)
        return

    append_inbox(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, text, author=AUTHOR_NAME)
    await update.message.reply_text(f"üó£ –†–∞—Å–ø–æ–∑–Ω–∞–ª –∏ –¥–æ–±–∞–≤–∏–ª:\n{text}")


# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("diag", diag_cmd))

    # –∫–Ω–æ–ø–∫–∏/–∫–æ–ª–±—ç–∫–∏
    app.add_handler(CallbackQueryHandler(on_cb))

    # —Å–æ–æ–±—â–µ–Ω–∏—è
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.add_handler(MessageHandler(filters.VOICE, handle_voice))

    # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)

    # Webhook –¥–ª—è Render
    app.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8080)),
        url_path=TELEGRAM_TOKEN,
        webhook_url=f"{BASE_URL}/{TELEGRAM_TOKEN}",
    )


if __name__ == "__main__":
    main()
