import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from config import TELEGRAM_TOKEN, GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, DEFAULT_AUTHOR
from google_sheets import append_inbox, fetch_ops_tasks, fetch_kpi, fetch_eff_actions
from logic import parse_due, pick_next
from gpt_brain import gpt_analyze_free, gpt_analyze_status, gpt_continue_status
logging.basicConfig(level=logging.INFO)
HELP = ("–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å–∫\n"
        "/add <—Ç–µ–∫—Å—Ç> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É/–∏–¥–µ—é\n"
        "/free ‚Äî —á—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å\n"
        "/status ‚Äî –∫—Ä–∞—Ç–∫–∏–π —Å—Ç–∞—Ç—É—Å KPI")

def detect_category(t: str):
    t = t.lower()
    if "#—Å–µ–º—å—è" in t or "—Å–µ–º—å—è" in t: return "–°–µ–º—å—è"
    if "#—Ä–µ–º–æ–Ω—Ç" in t: return "–†–µ–º–æ–Ω—Ç"
    if "#–ª–∏—á–Ω–æ–µ" in t: return "–õ–∏—á–Ω–æ–µ"
    if "#rnd" in t or "–Ω–µ–π—Ä–æ—Å–µ—Ç" in t or "gpt" in t: return "R&D"
    return "–°–æ–±—Ä–∞–Ω–∏–µ"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–æ—Ç–æ–≤. –£–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º.\n"+HELP)

async def add_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").replace("/add","",1).strip()
    if not text:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /add –û–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω–Ω–æ–µ –º–µ–Ω—é –∑–∞–≤—Ç—Ä–∞ #—Å–æ–±—Ä–∞–Ω–∏–µ")
        return
    cat = detect_category(text)
    # –≤—ã–¥–µ–ª–∏–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫
    due = ""
    for kw in ["—Å–µ–≥–æ–¥–Ω—è","–∑–∞–≤—Ç—Ä–∞","–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]:
        if kw in text.lower(): due = kw; break
    if not due and "—á–µ—Ä–µ–∑" in text: due = text  # –ø–∞—Ä—Å–µ—Ä –ø–æ–π–º–∞–µ—Ç
    due = parse_due(due)
    ok = append_inbox(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, text, category=cat, due_str=due, author=DEFAULT_AUTHOR)
    await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–ª –≤ Inbox ‚Üí [{cat}] {text}\n–°—Ä–æ–∫: {due or '‚Äî'}" if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø—ã).")

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) –ü–æ–ª—É—á–∞–µ–º KPI –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–∏–π —Ñ–∞–∫—Ç-–æ—Ç—á—ë—Ç
    kpi = fetch_kpi(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON)
    if not kpi:
        await update.message.reply_text("KPI –ø–æ–∫–∞ –ø—É—Å—Ç—ã.")
        return
    try:
        ng = kpi.get("%_–ù–ì_–¥–∞—Ç_–ø—Ä–æ–¥–∞–Ω–æ","")
        ngp = f"{int(float(ng)*100)}%" if ng not in ("", None) else "?"
    except:
        ngp = "?"
    msg = (f"–ü–ª–∞–Ω/–§–∞–∫—Ç: {kpi.get('–ü–ª–∞–Ω_–≤—ã—Ä—É—á–∫–∞','?')} / {kpi.get('–§–∞–∫—Ç_–≤—ã—Ä—É—á–∫–∞','?')}\n"
           f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {kpi.get('–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫','?')} | –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {kpi.get('–ö–æ–Ω–≤–µ—Ä—Å–∏—è_–∑–≤–æ–Ω–æ–∫‚Üí–±—Ä–æ–Ω—å','?')}\n"
           f"–ù–ì-–¥–∞—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã: {ngp}")
    await update.message.reply_text(msg)

    # 2) GPT-–∞–Ω–∞–ª–∏–∑ —Å –∑–∞—â–∏—â—ë–Ω–Ω–æ–π —Ä–∞—Å–ø–∞–∫–æ–≤–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result = gpt_analyze_status(kpi)
    if isinstance(result, tuple) and len(result) >= 2:
        comment, prompt = result[0], result[1]
    else:
        comment, prompt = str(result), ""

    # 3) –°–æ—Ö—Ä–∞–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–π / –∫–Ω–æ–ø–∫–∏
    context.user_data["last_status_prompt"] = prompt
    context.user_data["last_status_text"] = comment

    # 4) –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è≠¬ª
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è≠", callback_data="MORE::status")]
    ])
    await update.message.reply_text(f"ü§ñ –ê–Ω–∞–ª–∏–∑:\n{comment}", reply_markup=kb)
async def free_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = fetch_ops_tasks(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, 100)
    eff = fetch_eff_actions(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, 50)
    top = pick_next(tasks, eff, 3)
    if not top:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add.")
        return

    context.user_data["free_top"] = top

    buttons, lines = [], []
    for i, t in enumerate(top, 1):
        ttl = f"{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','?')} ‚Äî {t.get('–ü—Ä–æ–µ–∫—Ç','?')}: {t.get('–ó–∞–¥–∞—á–∞','?')}"
        lines.append(f"{i}) {ttl}\n   –î–µ–¥–ª–∞–π–Ω: {t.get('–î–µ–¥–ª–∞–π–Ω','‚Äî')} | –ü—Ä–æ–≥—Ä–µ—Å—Å: {t.get('–ü—Ä–æ–≥—Ä–µ—Å—Å_%','0')}%")
        buttons.append([
            InlineKeyboardButton("25 –º–∏–Ω üïí", callback_data=f"POM::25::{i}"),
            InlineKeyboardButton("60 –º–∏–Ω ‚è±Ô∏è", callback_data=f"POM::60::{i}"),
            InlineKeyboardButton("90 –º–∏–Ω üí™", callback_data=f"POM::90::{i}")
        ])

    # –í–ê–ñ–ù–û: –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–∫–æ–±–∫—É –∑–¥–µ—Å—å ‚Äî —ç—Ç–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤
    await update.message.reply_text(
        "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–µ–π—á–∞—Å:\n" + "\n".join(lines),
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    # –ê —É–∂–µ –∑–∞—Ç–µ–º ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å–æ–≤–µ—Ç GPT
    advice = gpt_analyze_free(top, eff)
    await update.message.reply_text(f"üí° –°–æ–≤–µ—Ç: {advice}")

async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()

    data = q.data.split("::")

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤ ---
    if len(data) >= 3 and data[0] == "POM":
        try:
            duration = int(data[1])
            idx = int(data[2]) - 1
        except Exception:
            await q.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        top = context.user_data.get("free_top", [])
        if not (0 <= idx < len(top)):
            await q.edit_message_text("–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞–∂–º–∏ /free –µ—â—ë —Ä–∞–∑.")
            return

        t = top[idx]
        ttl = f"{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','?')} ‚Äî {t.get('–ü—Ä–æ–µ–∫—Ç','?')}: {t.get('–ó–∞–¥–∞—á–∞','?')}"

        append_inbox(
            GOOGLE_SHEET_ID,
            GOOGLE_CREDENTIALS_JSON,
            f"[–°–ü–†–ò–ù–¢ {duration} –º–∏–Ω] {ttl}",
            category="–°–æ–±—Ä–∞–Ω–∏–µ",
            due_str="–∑–∞–≤—Ç—Ä–∞",
            author=DEFAULT_AUTHOR
        )

        await q.edit_message_text(
            f"üß≠ –î–æ–±–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å: {duration} –º–∏–Ω —Ñ–æ–∫—É—Å –Ω–∞ –∑–∞–¥–∞—á—É.\n–°–ª–æ—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 06:00 –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."
        )
        return

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è≠¬ª ---
    elif q.data == "MORE::status":
        from gpt_brain import gpt_continue_status
        prompt = context.user_data.get("last_status_prompt", "")
        so_far = context.user_data.get("last_status_text", "")
        if not prompt or not so_far:
            await q.message.reply_text("–ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏ /status.")
            return

        cont = gpt_continue_status(prompt, so_far)
        context.user_data["last_status_text"] = so_far + "\n" + cont

        await q.message.reply_text(f"ü§ñ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n{cont}")
        return

async def more_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prompt = context.user_data.get("last_status_prompt", "")
    so_far = context.user_data.get("last_status_text", "")
    if not prompt or not so_far:
        await update.message.reply_text("–ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–æ—Å–∏ /status.")
        return

    from gpt_brain import gpt_continue_status
    cont = gpt_continue_status(prompt, so_far)

    # –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
    context.user_data["last_status_text"] = so_far + "\n" + cont

    await update.message.reply_text(f"ü§ñ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n{cont}\n\n(/more ‚Äî –µ—â—ë –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å)")

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("free", free_cmd))
    app.add_handler(CommandHandler("more", more_cmd))
    app.add_handler(CallbackQueryHandler(on_cb))
    app.add_handler(MessageHandler(filters.COMMAND, start))

    # --- —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ ---
    base_url = os.getenv("BASE_URL", "").strip()      # https://...onrender.com
    port = int(os.getenv("PORT", "10000"))            # Render –∑–∞–¥–∞—ë—Ç PORT

    if base_url:
        # Webhook-—Ä–µ–∂–∏–º –¥–ª—è Render (Web Service –æ–±—è–∑–∞–Ω —Å–ª—É—à–∞—Ç—å –ø–æ—Ä—Ç)
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=TELEGRAM_TOKEN,                   # —Å–∫—Ä—ã—Ç—ã–π –ø—É—Ç—å
            webhook_url=f"{base_url}/{TELEGRAM_TOKEN}",
        )
    else:
        # –õ–æ–∫–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–ª—è—Ç—å polling
        app.run_polling()

if __name__ == "__main__":
    main()
