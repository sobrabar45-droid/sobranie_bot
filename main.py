import os
import logging
import urllib.parse
import datetime as dt
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

from config import TELEGRAM_TOKEN, GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, DEFAULT_AUTHOR, TZ
from google_sheets import append_inbox, fetch_ops_tasks, fetch_kpi, fetch_eff_actions
from logic import parse_due, pick_next
from gpt_brain import gpt_analyze_free, gpt_analyze_status, gpt_continue_status
from calendar_api import add_event

logging.basicConfig(level=logging.INFO)

# ====== UI –¢–ï–ö–°–¢–´ ======
BTN_CAPTURE   = "‚ûï –í–Ω–µ—Å—Ç–∏"
BTN_TODAY     = "üìÖ –°–µ–≥–æ–¥–Ω—è"
BTN_WEEK      = "üóì –ù–µ–¥–µ–ª—è"
BTN_MONTH     = "üìÜ –ú–µ—Å—è—Ü"
BTN_CALENDAR  = "üìé –ö–∞–ª–µ–Ω–¥–∞—Ä—å"
BTN_FOCUS     = "üéØ –§–æ–∫—É—Å"
BTN_KPI       = "üìà –°—Ç–∞—Ç—É—Å KPI"
BTN_MENU      = "–ú–µ–Ω—é"

MAIN_KB = ReplyKeyboardMarkup(
    [[KeyboardButton(BTN_CAPTURE), KeyboardButton(BTN_TODAY), KeyboardButton(BTN_WEEK)],
     [KeyboardButton(BTN_MONTH), KeyboardButton(BTN_CALENDAR), KeyboardButton(BTN_FOCUS)],
     [KeyboardButton(BTN_KPI)]],
    resize_keyboard=True
)

# –§–ª–∞–≥ —Ä–µ–∂–∏–º–∞ ¬´–∂–¥—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –∑–∞–¥–∞—á—É¬ª
AWAITING_CAPTURE_FLAG = "awaiting_capture"

HELP = ("–ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω–∏–∑—É. –ú–æ–≥—É:\n"
        f"‚Ä¢ {BTN_CAPTURE} ‚Äî –±—ã—Å—Ç—Ä–æ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–¥–∞—á—É (–±–µ–∑ /add)\n"
        f"‚Ä¢ {BTN_TODAY}/{BTN_WEEK}/{BTN_MONTH} ‚Äî —Å–ø–∏—Å–æ–∫ –¥–µ–ª —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º\n"
        f"‚Ä¢ {BTN_CALENDAR} ‚Äî —Å—Å—ã–ª–∫–∞ –∏ –±—ã—Å—Ç—Ä—ã–µ —Å–ª–æ—Ç—ã\n"
        f"‚Ä¢ {BTN_FOCUS} ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ 2‚Äì3 –∑–∞–¥–∞—á–∏ –∏ —Å–ø—Ä–∏–Ω—Ç—ã\n"
        f"‚Ä¢ {BTN_KPI} ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç—á—ë—Ç –ø–æ KPI\n")

# ====== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï ======
def detect_category(t: str):
    t = t.lower()
    if "#—Å–µ–º—å—è" in t or "—Å–µ–º—å—è" in t: return "–°–µ–º—å—è"
    if "#—Ä–µ–º–æ–Ω—Ç" in t: return "–†–µ–º–æ–Ω—Ç"
    if "#–ª–∏—á–Ω–æ–µ" in t: return "–õ–∏—á–Ω–æ–µ"
    if "#rnd" in t or "–Ω–µ–π—Ä–æ—Å–µ—Ç" in t or "gpt" in t: return "R&D"
    return "–°–æ–±—Ä–∞–Ω–∏–µ"

def format_tasks(tasks):
    lines = []
    for i, t in enumerate(tasks, 1):
        cat = t.get("–ö–∞—Ç–µ–≥–æ—Ä–∏—è","?")
        proj = t.get("–ü—Ä–æ–µ–∫—Ç","?")
        name = t.get("–ó–∞–¥–∞—á–∞","?")
        dedl = t.get("–î–µ–¥–ª–∞–π–Ω","‚Äî")
        prog = t.get("–ü—Ä–æ–≥—Ä–µ—Å—Å_%","0")
        prio = t.get("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", t.get("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç(1-3)","-"))
        lines.append(f"{i}) [{prio}] {name} ‚Äî #{cat}/{proj} | –¥–µ–¥–ª–∞–π–Ω {dedl} | –ø—Ä–æ–≥—Ä–µ—Å—Å {prog}%")
    return "\n".join(lines) if lines else "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."

def telegram_calendar_link(calendar_id: str) -> str:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–≤–æ–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º
    # (—ç—Ç–æ—Ç –ª–∏–Ω–∫ –Ω–µ ¬´—Å–µ–∫—Ä–µ—Ç–Ω—ã–π¬ª)
    cid = urllib.parse.quote(calendar_id, safe='')
    return f"https://calendar.google.com/calendar/u/0/r?cid={cid}"

# ====== –°–¢–ê–†–¢ / –ú–ï–ù–Æ ======
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ì–æ—Ç–æ–≤. –£–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –≤—Ä–µ–º–µ–Ω–µ–º.\n" + HELP,
        reply_markup=MAIN_KB
    )

# ====== –ö–ù–û–ü–ö–ê ¬´–í–Ω–µ—Å—Ç–∏¬ª ======
async def handle_capture_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data[AWAITING_CAPTURE_FLAG] = True
    await update.message.reply_text(
        "–û–∫–µ–π, –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π. –ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Äî –∫—É–ø–∏—Ç—å –∫–∞—Ä—Ç–æ—à–∫–∏ –∑–∞–≤—Ç—Ä–∞ #—Å–µ–º—å—è\n"
        "‚Äî –ø–æ–∑–≤–æ–Ω–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫—É –∫–æ—Ñ–µ —á–µ—Ä–µ–∑ 2 –¥ #—Å–æ–±—Ä–∞–Ω–∏–µ",
        reply_markup=MAIN_KB
    )

async def handle_any_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ ¬´–í–Ω–µ—Å—Ç–∏¬ª ‚Äî –ø–∏—à–µ–º –≤ Inbox
    if context.user_data.get(AWAITING_CAPTURE_FLAG):
        context.user_data[AWAITING_CAPTURE_FLAG] = False

        cat = detect_category(text)
        # –í—ã–¥–µ–ª–∏–º –ø—Ä–æ—Å—Ç–æ–π —Å—Ä–æ–∫ (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞/—á–µ—Ä–µ–∑ N –¥ / dd.mm(/yyyy))
        due = ""
        for kw in ["—Å–µ–≥–æ–¥–Ω—è", "–∑–∞–≤—Ç—Ä–∞", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]:
            if kw in text.lower():
                due = kw
                break
        if not due and ("—á–µ—Ä–µ–∑" in text or "." in text):
            due = text
        due = parse_due(due)

        ok = append_inbox(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, text, category=cat, due_str=due, author=DEFAULT_AUTHOR)
        if ok:
            await update.message.reply_text(
                f"–ó–∞–ø–∏—Å–∞–ª –≤ Inbox ‚Üí [{cat}] {text}\n–°—Ä–æ–∫: {due or '‚Äî'}",
                reply_markup=MAIN_KB
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø—ã).", reply_markup=MAIN_KB)
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∑–≤–æ–ª–∏–º –ø–µ—á–∞—Ç–∞—Ç—å ¬´–ú–µ–Ω—é¬ª —Ç–µ–∫—Å—Ç–æ–º
    if text.lower() in ("–º–µ–Ω—é", "menu"):
        await start(update, context)
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –≤–Ω–µ —Ä–µ–∂–∏–º–∞ ‚Äî –º—è–≥–∫–æ –Ω–∞–ø–æ–º–Ω–∏–º –ø—Ä–æ –∫–Ω–æ–ø–∫—É
    await update.message.reply_text(
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –±—ã—Å—Ç—Ä–æ –∑–∞–ø–∏—Å–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏ ¬´–í–Ω–µ—Å—Ç–∏¬ª. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ‚Äî –Ω–∞ –∫–Ω–æ–ø–∫–∞—Ö –Ω–∏–∂–µ.",
        reply_markup=MAIN_KB
    )

# ====== KPI ======
async def kpi_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    kpi = fetch_kpi(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON)
    if not kpi:
        await update.message.reply_text("KPI –ø–æ–∫–∞ –ø—É—Å—Ç—ã.", reply_markup=MAIN_KB)
        return
    try:
        ng = kpi.get("%_–ù–ì_–¥–∞—Ç_–ø—Ä–æ–¥–∞–Ω–æ","")
        ngp = f"{int(float(ng)*100)}%" if ng not in ("", None) else "?"
    except:
        ngp = "?"
    msg = (f"–ü–ª–∞–Ω/–§–∞–∫—Ç: {kpi.get('–ü–ª–∞–Ω_–≤—ã—Ä—É—á–∫–∞','?')} / {kpi.get('–§–∞–∫—Ç_–≤—ã—Ä—É—á–∫–∞','?')}\n"
           f"–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {kpi.get('–°—Ä–µ–¥–Ω–∏–π_—á–µ–∫','?')} | –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {kpi.get('–ö–æ–Ω–≤–µ—Ä—Å–∏—è_–∑–≤–æ–Ω–æ–∫‚Üí–±—Ä–æ–Ω—å','?')}\n"
           f"–ù–ì-–¥–∞—Ç—ã –ø—Ä–æ–¥–∞–Ω—ã: {ngp}")
    await update.message.reply_text(msg, reply_markup=MAIN_KB)

    result = gpt_analyze_status(kpi)
    if isinstance(result, tuple) and len(result) >= 2:
        comment, prompt = result[0], result[1]
    else:
        comment, prompt = str(result), ""
    context.user_data["last_status_prompt"] = prompt
    context.user_data["last_status_text"] = comment

    kb = InlineKeyboardMarkup([[InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è≠", callback_data="MORE::status")]])
    await update.message.reply_text(f"ü§ñ –ê–Ω–∞–ª–∏–∑:\n{comment}", reply_markup=kb)

# ====== TODAY / WEEK / MONTH ======
def _period_dates(which: str):
    today = dt.date.today()
    if which == "today":
        return today, today
    if which == "week":
        return today, today + dt.timedelta(days=7)
    if which == "month":
        # 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π –≤–ø–µ—Ä—ë–¥
        return today, today + dt.timedelta(days=30)
    return today, today

async def _send_period(update: Update, context: ContextTypes.DEFAULT_TYPE, which: str):
    start, end = _period_dates(which)
    # –ë–µ—Ä—ë–º –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–≤–∫–ª–∞–¥–∫–∞ 02_Operations_Sobranie)
    tasks = fetch_ops_tasks(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, 300)

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–µ–¥–ª–∞–π–Ω—É –≤ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ
    def to_date(s):
        try:
            return dt.datetime.strptime(str(s), "%Y-%m-%d").date()
        except:
            return None
    in_range = []
    for t in tasks:
        d = to_date(t.get("–î–µ–¥–ª–∞–π–Ω",""))
        if d is None:
            continue
        if start <= d <= end:
            in_range.append(t)

    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    in_range.sort(key=lambda t: t.get("–î–µ–¥–ª–∞–π–Ω",""))
    text = f"üìã {('–°–µ–≥–æ–¥–Ω—è' if which=='today' else '7 –¥–Ω–µ–π' if which=='week' else '30 –¥–Ω–µ–π')}:\n" + format_tasks(in_range)
    await update.message.reply_text(text, reply_markup=MAIN_KB)

async def today_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_period(update, context, "today")

async def week_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_period(update, context, "week")

async def month_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _send_period(update, context, "month")

# ====== –§–û–ö–£–° ======
async def focus_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tasks = fetch_ops_tasks(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, 100)
    eff = fetch_eff_actions(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, 50)
    top = pick_next(tasks, eff, 3)
    if not top:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –°–Ω–∞—á–∞–ª–∞ ¬´–í–Ω–µ—Å—Ç–∏¬ª.", reply_markup=MAIN_KB)
        return

    context.user_data["free_top"] = top
    # –ö–Ω–æ–ø–∫–∏ —Å–ø—Ä–∏–Ω—Ç–∞
    buttons, lines = [], []
    for i, t in enumerate(top, 1):
        ttl = f"{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','?')} ‚Äî {t.get('–ü—Ä–æ–µ–∫—Ç','?')}: {t.get('–ó–∞–¥–∞—á–∞','?')}"
        lines.append(f"{i}) {ttl}\n   –î–µ–¥–ª–∞–π–Ω: {t.get('–î–µ–¥–ª–∞–π–Ω','‚Äî')} | –ü—Ä–æ–≥—Ä–µ—Å—Å: {t.get('–ü—Ä–æ–≥—Ä–µ—Å—Å_%','0')}%")
        buttons.append([
            InlineKeyboardButton("25 –º–∏–Ω üïí", callback_data=f"POM::25::{i}"),
            InlineKeyboardButton("60 –º–∏–Ω ‚è±Ô∏è", callback_data=f"POM::60::{i}"),
            InlineKeyboardButton("90 –º–∏–Ω üí™", callback_data=f"POM::90::{i}")
        ])
    await update.message.reply_text("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ —Å–µ–π—á–∞—Å:\n" + "\n".join(lines),
                                    reply_markup=InlineKeyboardMarkup(buttons))
    advice = gpt_analyze_free(top, eff)
    await update.message.reply_text(f"üí° –°–æ–≤–µ—Ç: {advice}", reply_markup=MAIN_KB)

# ====== –ö–ê–õ–ï–ù–î–ê–†–¨ ======
async def calendar_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cal_id = os.getenv("CALENDAR_ID", "").strip()
    if not cal_id:
        await update.message.reply_text("CALENDAR_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.", reply_markup=MAIN_KB)
        return
    link = telegram_calendar_link(cal_id)
    kb = InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è 19:00 +60", callback_data="CAL::TODAY19::60"),
         InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞ 06:00 +90", callback_data="CAL::TOMORROW06::90")],
        [InlineKeyboardButton("–ë–ª–∏–∂–∞–π—à–µ–µ –æ–∫–Ω–æ +25", callback_data="CAL::NEXT::25")]
    ])
    await update.message.reply_text(f"–¢–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å:\n{link}\n–í—ã–±–µ—Ä–∏ –±—ã—Å—Ç—Ä—ã–π —Å–ª–æ—Ç:", reply_markup=kb)

# ====== CALLBACKS ======
async def on_cb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    data = q.data.split("::")

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Å–ø—Ä–∏–Ω—Ç–æ–≤ (–∏–∑ ¬´–§–æ–∫—É—Å¬ª) ---
    if len(data) >= 3 and data[0] == "POM":
        try:
            duration = int(data[1])
            idx = int(data[2]) - 1
        except Exception:
            await q.edit_message_text("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        top = context.user_data.get("free_top", [])
        if not (0 <= idx < len(top)):
            await q.edit_message_text("–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞–∂–º–∏ ¬´üéØ –§–æ–∫—É—Å¬ª –µ—â—ë —Ä–∞–∑.")
            return

        t = top[idx]
        ttl = f"{t.get('–ö–∞—Ç–µ–≥–æ—Ä–∏—è','?')} ‚Äî {t.get('–ü—Ä–æ–µ–∫—Ç','?')}: {t.get('–ó–∞–¥–∞—á–∞','?')}"

        # 1) —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—ã–±–æ—Ä –≤ Inbox
        append_inbox(
            GOOGLE_SHEET_ID,
            GOOGLE_CREDENTIALS_JSON,
            f"[–°–ü–†–ò–ù–¢ {duration} –º–∏–Ω] {ttl}",
            category="–°–æ–±—Ä–∞–Ω–∏–µ",
            due_str="–∑–∞–≤—Ç—Ä–∞",
            author=DEFAULT_AUTHOR
        )
        # 2) —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤—Ç—Ä–∞ 06:00 –ø–æ TZ
        try:
            created = add_event(
                summary=f"[–°–ü–†–ò–ù–¢ {duration} –º–∏–Ω] {ttl}",
                minutes=duration,
                start_dt=None,  # –∑–∞–≤—Ç—Ä–∞ 06:00
                description="–ê–≤—Ç–æ–∑–∞–ø–∏—Å—å –∏–∑ VP Assistant (üéØ –§–æ–∫—É—Å)"
            )
            link = created.get("htmlLink", "‚Äî")
            await q.edit_message_text(
                f"üß≠ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª —Å–ø—Ä–∏–Ω—Ç: {duration} –º–∏–Ω.\n"
                f"–°—Ç–∞—Ä—Ç: –∑–∞–≤—Ç—Ä–∞ 06:00 ({os.getenv('TZ', 'Europe/Berlin')}).\n"
                f"–ö–∞–ª–µ–Ω–¥–∞—Ä—å: {link}"
            )
        except Exception as e:
            await q.edit_message_text(
                "üß≠ –°–ø—Ä–∏–Ω—Ç –≤–Ω–µ—Å—ë–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª, –Ω–æ —Å–æ–±—ã—Ç–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ —Å–æ–∑–¥–∞–ª–æ—Å—å.\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {e}"
            )
        return

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–±—ã—Å—Ç—Ä—ã–µ –ø—Ä–µ—Å–µ—Ç—ã) ---
    if len(data) >= 3 and data[0] == "CAL":
        preset = data[1]
        try:
            duration = int(data[2])
        except:
            duration = 60

        # –≤—ã—Å—á–∏—Ç–∞–µ–º start_dt –ª–æ–∫–∞–ª—å–Ω–æ
        from dateutil import tz as _tz
        local = _tz.gettz(TZ or "Europe/Berlin")
        now = dt.datetime.now(local)

        if preset == "TODAY19":
            start_dt = now.replace(hour=19, minute=0, second=0, microsecond=0)
            if start_dt < now:
                start_dt = start_dt + dt.timedelta(days=1)
        elif preset == "TOMORROW06":
            start_dt = (now + dt.timedelta(days=1)).replace(hour=6, minute=0, second=0, microsecond=0)
        else:
            # –ø–æ–∫–∞ –∫–∞–∫ –∑–∞–≤—Ç—Ä–∞ 06:00 (–ø–æ–∑–∂–µ –¥–æ–±–∞–≤–∏–º –ø–æ–∏—Å–∫ –æ–∫–Ω–∞)
            start_dt = (now + dt.timedelta(days=1)).replace(hour=6, minute=0, second=0, microsecond=0)

        try:
            created = add_event(
                summary=f"[–°–ª–æ—Ç {duration} –º–∏–Ω] –§–æ–∫—É—Å-–Ω–∞–±–æ—Ä",
                minutes=duration,
                start_dt=start_dt,
                description="–ë—ã—Å—Ç—Ä—ã–π —Å–ª–æ—Ç (–ö–∞–ª–µ–Ω–¥–∞—Ä—å)"
            )
            link = created.get("htmlLink", "‚Äî")
            when = start_dt.strftime("%Y-%m-%d %H:%M")
            await q.edit_message_text(f"‚úÖ –°–ª–æ—Ç —Å–æ–∑–¥–∞–Ω: {duration} –º–∏–Ω ‚Ä¢ {when} ({TZ})\n{link}")
        except Exception as e:
            await q.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–ª–æ—Ç: {e}")
        return

    # --- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚è≠¬ª –ø–æ—Å–ª–µ KPI ---
    if q.data == "MORE::status":
        prompt = context.user_data.get("last_status_prompt", "")
        so_far = context.user_data.get("last_status_text", "")
        if not prompt or not so_far:
            await q.message.reply_text("–ù–µ—á–µ–≥–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ ¬´üìà –°—Ç–∞—Ç—É—Å KPI¬ª.")
            return
        cont = gpt_continue_status(prompt, so_far)
        context.user_data["last_status_text"] = so_far + "\n" + cont
        await q.message.reply_text(f"ü§ñ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n{cont}")
        return

# ====== –†–ï–ó–ï–†–í–ù–´–ï /–ö–û–ú–ê–ù–î–´ (–æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ –Ω—É–∂–Ω—ã) ======
async def add_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").replace("/add","",1).strip()
    if not text:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /add –û–±–Ω–æ–≤–∏—Ç—å —ç–∫—Ä–∞–Ω–Ω–æ–µ –º–µ–Ω—é –∑–∞–≤—Ç—Ä–∞ #—Å–æ–±—Ä–∞–Ω–∏–µ", reply_markup=MAIN_KB)
        return
    cat = detect_category(text)
    due = ""
    for kw in ["—Å–µ–≥–æ–¥–Ω—è","–∑–∞–≤—Ç—Ä–∞","–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]:
        if kw in text.lower(): due = kw; break
    if not due and "—á–µ—Ä–µ–∑" in text: due = text
    due = parse_due(due)
    ok = append_inbox(GOOGLE_SHEET_ID, GOOGLE_CREDENTIALS_JSON, text, category=cat, due_str=due, author=DEFAULT_AUTHOR)
    await update.message.reply_text(f"–ó–∞–ø–∏—Å–∞–ª –≤ Inbox ‚Üí [{cat}] {text}\n–°—Ä–æ–∫: {due or '‚Äî'}" if ok else "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å (–ø—Ä–æ–≤–µ—Ä—å –¥–æ—Å—Ç—É–ø—ã).",
                                    reply_markup=MAIN_KB)

async def free_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º ¬´–§–æ–∫—É—Å¬ª
    await focus_button(update, context)

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–Ω–æ–ø–∫—É KPI
    await kpi_button(update, context)

def main():
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–Ω–æ–ø–æ—á–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ ¬´—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ¬ª –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_cmd))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("free", free_cmd))
    app.add_handler(CallbackQueryHandler(on_cb))

    # –ö–Ω–æ–ø–∫–∏ (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
    app.add_handler(MessageHandler(filters.Regex(f"^{BTN_CAPTURE}$"), handle_capture_button))
    app.add_handler(MessageHandler(filters.Regex(f"^{BTN_TODAY}$"), today_button))
    app.add_handler(MessageHandler(filters.Regex(f"^{BTN_WEEK}$"), week_button))
    app.add_handler(MessageHandler(filters.Regex(f"^{BTN_MONTH}$"), month_button))
    app.add_handler(MessageHandler(filters.Regex(f"^{BTN_CALENDAR}$"), calendar_button))
    app.add_handler(MessageHandler(filters.Regex(f"^{BTN_FOCUS}$"), focus_button))
    app.add_handler(MessageHandler(filters.Regex(f"^{BTN_KPI}$"), kpi_button))

    # –†–µ–∂–∏–º ¬´–∂–¥—É —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ '–í–Ω–µ—Å—Ç–∏'¬ª
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_any_text))
    # –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
    app.add_handler(MessageHandler(filters.COMMAND, start))

    # –ó–∞–ø—É—Å–∫ (webhook/polling)
    base_url = os.getenv("BASE_URL", "").strip()  # https://...onrender.com
    port = int(os.getenv("PORT", "10000"))
    if base_url:
        app.run_webhook(
            listen="0.0.0.0",
            port=port,
            url_path=TELEGRAM_TOKEN,
            webhook_url=f"{base_url}/{TELEGRAM_TOKEN}",
        )
    else:
        app.run_polling()

if __name__ == "__main__":
    main()
